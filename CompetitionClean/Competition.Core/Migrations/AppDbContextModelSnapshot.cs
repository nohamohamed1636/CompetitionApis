// <auto-generated />
using System;
using Core.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnsweringDuration")
                        .HasColumnType("int");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<double?>("FullMark")
                        .HasColumnType("float");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionsCount")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolBranchId")
                        .HasColumnType("int");

                    b.Property<int>("StaticDuration")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("publishFree")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Core.Models.CompetitionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompetitionTargetId")
                        .HasColumnType("int");

                    b.Property<int>("CompetitonQuestionId")
                        .HasColumnType("int");

                    b.Property<bool>("Corrected")
                        .HasColumnType("bit");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<double?>("Mark")
                        .HasColumnType("float");

                    b.Property<bool?>("RightAnswer")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("createdDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionTargetId");

                    b.HasIndex("CompetitonQuestionId");

                    b.ToTable("CompetitionAnswers");
                });

            modelBuilder.Entity("Core.Models.CompetitionQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerDuration")
                        .HasColumnType("int");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<double?>("CorrectionMark")
                        .HasColumnType("float");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("MultibleChoice")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<bool>("TrueFalse")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("CompetitionQuestions");
                });

            modelBuilder.Entity("Core.Models.CompetitionTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Absent")
                        .HasColumnType("bit");

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<double>("Degree")
                        .HasColumnType("float");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Opened")
                        .HasColumnType("bit");

                    b.Property<double?>("PercentScore")
                        .HasColumnType("float");

                    b.Property<string>("ResultGrade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Solved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StarDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Started")
                        .HasColumnType("int");

                    b.Property<int?>("StudentHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("CompetitionTargets");
                });

            modelBuilder.Entity("Core.Models.CompetitionAnswer", b =>
                {
                    b.HasOne("Core.Models.CompetitionTarget", "CompetitionTargets")
                        .WithMany("CompetitionAnswers")
                        .HasForeignKey("CompetitionTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.CompetitionQuestion", "CompetitionQuestions")
                        .WithMany("CompetitionAnswers")
                        .HasForeignKey("CompetitonQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitionQuestions");

                    b.Navigation("CompetitionTargets");
                });

            modelBuilder.Entity("Core.Models.CompetitionQuestion", b =>
                {
                    b.HasOne("Core.Models.Competition", "Competitions")
                        .WithMany("CompetitionQuestions")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competitions");
                });

            modelBuilder.Entity("Core.Models.CompetitionTarget", b =>
                {
                    b.HasOne("Core.Models.Competition", "Competitions")
                        .WithMany("CompetitionTargets")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competitions");
                });

            modelBuilder.Entity("Core.Models.Competition", b =>
                {
                    b.Navigation("CompetitionQuestions");

                    b.Navigation("CompetitionTargets");
                });

            modelBuilder.Entity("Core.Models.CompetitionQuestion", b =>
                {
                    b.Navigation("CompetitionAnswers");
                });

            modelBuilder.Entity("Core.Models.CompetitionTarget", b =>
                {
                    b.Navigation("CompetitionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
